1. Count words
#include <stdio.h>

int main() {
    char s[250];
    int words=0;
    gets(s);
    for (int i=0; s[i]!='\0'; i++){
        if((i==0 && s[i]!=' ') ||(s[i]!=' '&& s[i-1]==' '))
            words++;
    }
    printf("%d", words);
    return 0;
}

2. Check palidrome
#include <stdio.h>
#include <string.h>

int main() {
    char s[250];
    int pal=1;
    gets(s);
    int len=strlen(s);
    for (int i=0; i<len/2; i++){
        if(s[i]!=s[len-i-1])
            pal=0;
    }
    if(pal==1)
        printf("Palindrome");
    else printf("Not a palindrome");
    return 0;
}

3. SUDOKU solver
#include <stdio.h>

int a[10][10];
int fixat[10][10];

int verificare(int x, int y){
    int ok=1;
    for(int i=1; i<=9; i++){
        if(a[x][i]==a[x][y] && i!=y)
            return 0;
        if(a[i][y]==a[x][y] && i!=x)
            return 0;
    }
    int x1=(x-1)/3;
    int y1=(y-1)/3;
    for(int i=1; i<=3; i++){
        for(int j=1; j<=3; j++){
            //printf("%d:%d\n", x1*3+i, y1*3+j);
            if(a[x1*3+i][y1*3+j]==a[x][y] && x1*3+i!=x && y1*3+j!=y) return 0;
        }
    }

    return ok;
}

int afisare(){
    for(int i=1; i<=9; i++) {
        for (int j = 1; j <= 9; j++) {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void solve_sudoku(int x, int y){
    if(fixat[x][y]!=1){
        fixat[x][y]=1;
        for(int k=1; k<=9; k++){
            a[x][y]=k;
            if(verificare(x, y)==1) {
                if (y == 9) {
                    if (x < 9) {
                        solve_sudoku(x + 1, 1);
                    }
                    else{
                        afisare();
                    }
                } else solve_sudoku(x, y + 1);
            }
        }
        a[x][y]=0;
        fixat[x][y]=0;
    }
    else{
        if (y == 9) {
            if (x < 9) {
                solve_sudoku(x + 1, 1);
            }
            else{
                afisare();
            }
        } else solve_sudoku(x, y + 1);
    }
}

int main() {
    for(int i=1; i<10; i++){
        for(int j=1; j<10; j++){
            scanf("%d", &a[i][j]);
            if(a[i][j]!=0)
                fixat[i][j]=1;
        }
    }
    solve_sudoku(1, 1);

    return 0;
}


4. Array sorting
#include <stdio.h>

void sort_asc(int values[], int len){
    for(int i=0; i<len; i++){
        for(int j=i+1; j<len; j++){
            if(values[i]>values[j])
            {
                int aux=values[i];
                values[i]=values[j];
                values[j]=aux;
            }
        }
    }
}

void sort_desc(int values[], int len){
    for(int i=0; i<len; i++){
        for(int j=i+1; j<len; j++){
            if(values[i]<values[j])
            {
                int aux=values[i];
                values[i]=values[j];
                values[j]=aux;
            }
        }
    }
}

void print(int values[], int len){
    for(int i=0; i<len; i++){
        printf("%d ", values[i]);
    }
    printf("\n");
}

void search(int values[], int len, int value){
    for(int i=0; i<len; i++) {
        if(values[i]==value){
            printf("Value found on position: %d", i+1);
            return;
        }
    }
    printf("Value not found");
}

int main() {
    int len, value;
    int option;
    printf("Write length of array:");
    scanf("%d", &len);
    int a[len];
    printf("Write values for array:");
    for(int i=0; i<len; i++){
        scanf("%d", &a[i]);
    }

    printf("menu:\n");
    printf("1. Sort in increasing order\n");
    printf("2. Sort in decreasing order\n");
    printf("3. Search item\n");
    scanf("%d", &option);

    while(option!=4){
        switch (option) {
            case 1:
                sort_asc(a, len);
                print(a, len);
                break;
            case 2:
                sort_desc(a, len);
                print(a, len);
                break;
            case 3:
                printf("Type searched value:");
                scanf("%d", &value);
                search(a, len, value);
                break;
        }
        scanf("%d", &option);
    }
    return 0;
}